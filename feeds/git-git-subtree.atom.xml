<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Generic Surname</title><link href="https://jrsmith3.github.io/" rel="alternate"></link><link href="https://jrsmith3.github.io/feeds/git-git-subtree.atom.xml" rel="self"></link><id>https://jrsmith3.github.io/</id><updated>2014-10-12T00:00:00-04:00</updated><entry><title>Merging a subdirectory from another repo via git-subtree</title><link href="https://jrsmith3.github.io/merging-a-subdirectory-from-another-repo-via-git-subtree.html" rel="alternate"></link><updated>2014-10-12T00:00:00-04:00</updated><author><name>Joshua Ryan Smith</name></author><id>tag:jrsmith3.github.io,2014-10-12:merging-a-subdirectory-from-another-repo-via-git-subtree.html</id><summary type="html">&lt;p&gt;Greg Wilson &lt;a href="https://twitter.com/jiffyclub/status/519920529038262272"&gt;wanted to know&lt;/a&gt; how to move a directory from one git repo to another while preserving history. Ash Wilson posted a &lt;a href="https://gist.github.com/smashwilson/015e6a3abfbf7af73d31"&gt;gist&lt;/a&gt; demonstrating a merge and delete strategy. A similar result can be achieved using &lt;code&gt;git-subtree&lt;/code&gt;. The advantage of the &lt;code&gt;git-subtree&lt;/code&gt; approach is that &lt;code&gt;git-subtree&lt;/code&gt; creates a new branch containing only the commits pertaining to files located in a specified subdirectory. Like Ash's approach, &lt;code&gt;git-subtree&lt;/code&gt; will result in the final state of the target repo is such that changes to the target repo won't get pushed back upstream to the source.&lt;/p&gt;
&lt;p&gt;If you want to carry &lt;em&gt;all&lt;/em&gt; of the commit history from another repo into the target repo, Ash's approach is probably the way to go. If you want only the commits pertaining to files within a subdirectory of the source repo, &lt;code&gt;git-subtree&lt;/code&gt; is the way to go.&lt;/p&gt;
&lt;p&gt;The workflow with &lt;code&gt;git-subtree&lt;/code&gt; is pretty simple: you specify a subdirectory in a source repo which you want to break out, then you merge those commits into a subdirectory in a target repo.&lt;/p&gt;
&lt;p&gt;I am modifying my example slightly from Ash's because it looks like the &lt;code&gt;/openstack-swift/&lt;/code&gt; directory has been removed from jclouds/jclouds-labs-openstack as of 2014-10-12. I will use &lt;code&gt;openstack-glance&lt;/code&gt; instead. Thus, we're moving the &lt;code&gt;/openstack-glance/&lt;/code&gt; directory from jclouds/jclouds-labs-openstack to &lt;code&gt;/apis/openstack-glance/&lt;/code&gt; in jclouds/jclouds. The two approaches begin in the same way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Clone the target repo
git clone git@github.com:jclouds/jclouds.git
cd jclouds

# Add the source repository as a remote, and perform the initial fetch.
git remote add -f sourcerepo git@github.com:jclouds/jclouds-labs-openstack.git

# Create a branch based on the source repositories&amp;#39; branch that contains the state you want to copy.
git checkout -b staging-branch sourcerepo/master

# Here&amp;#39;s where the two approaches diverge.
# Create a synthetic branch using the commits in `/openstack-glance/` from `sourcerepo`
git subtree split -P openstack-glance -b openstack-glance

# Checkout `master` and add the new `openstack-glance` branch into `/apis/openstack-glance/`. At this point, the desired result will have been achieved.
git checkout master
git subtree add -P apis/openstack-glance openstack-glance

# Clean up by removing the commits from the `openstack-glance` branch and the `sourcerepo` remote.
git branch -D openstack-glance staging-branch
git remote rm sourcerepo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it. No additional (potentially superfluous) commits were brought into the &lt;code&gt;jclouds&lt;/code&gt; repo from the &lt;code&gt;jclouds-labs-openstack&lt;/code&gt; repo.&lt;/p&gt;</summary></entry></feed>